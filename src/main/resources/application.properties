server.port=8000

######### sharing-jdbc 配置 #########

## 配置数据源
# 真实数据源名称，多个数据源用逗号区分
spring.shardingsphere.datasource.names=m1,m2

# 第一个数据源
# 数据库连接池全类名
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
# 数据库驱动类名，以数据库连接池自身配置为准
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
# 数据库 URL 连接，以数据库连接池自身配置为准
spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/edu_db_1?serverTimezone=GMT%2B8
# 数据库用户名，以数据库连接池自身配置为准
spring.shardingsphere.datasource.m1.username=root
# 数据库密码，以数据库连接池自身配置为准
spring.shardingsphere.datasource.m1.password=abc123
# spring.shardingsphere.datasource.m1.<xxx>= # ... 数据库连接池的其它属性

# 第一个数据源
# 数据库连接池全类名
spring.shardingsphere.datasource.m2.type=com.alibaba.druid.pool.DruidDataSource
# 数据库驱动类名，以数据库连接池自身配置为准
spring.shardingsphere.datasource.m2.driver-class-name=com.mysql.cj.jdbc.Driver
# 数据库 URL 连接，以数据库连接池自身配置为准
spring.shardingsphere.datasource.m2.url=jdbc:mysql://localhost:3306/edu_db_2?serverTimezone=GMT%2B8
# 数据库用户名，以数据库连接池自身配置为准
spring.shardingsphere.datasource.m2.username=root
# 数据库密码，以数据库连接池自身配置为准
spring.shardingsphere.datasource.m2.password=abc123



# 指定数据库分布情况 数据库里面表的分布情况
# 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，
# 用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
spring.shardingsphere.sharding.tables.course.actual-data-nodes=m$->{1..2}.course_$->{1..2}

# 指定主键生成策略
# 分布式序列策略配置
# 分布式序列列名称
spring.shardingsphere.sharding.tables.course.key-generator.column=cid
# 分布式序列算法名称
spring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE

# 指定表分片策略
# 分片列名称
spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column=cid
# 分片算法
# 指定cid为奇数添加到表2 为偶数添加到表1
spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=course_$->{cid % 2 + 1}

# 指定数据库分片策略 针对数据库中的所有表
# 行表达式分片策略
#spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
# 分片算法行表达式，需符合 groovy 语法
# 指定user_id为偶数添加到m1 为奇数添加到m2
#spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=m$->{user_id % 2 + 1}

# 指定数据库中某个表的数据库分片策略 针对数据库中的某个表
spring.shardingsphere.sharding.tables.course.database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.course.database-strategy.inline.algorithm-expression=m$->{user_id % 2 + 1}

# 打开sql输出日志
spring.shardingsphere.props.sql.show=true

# 一个实体类对应两张表 覆盖
spring.main.allow-bean-definition-overriding=true